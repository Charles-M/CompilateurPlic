package compilplic.analyse ;

import java_cup.runtime.*;
import compilplic.lexique.* ;
import compilplic.tds.* ;
import compilplic.lexique.expression.* ;
import java.util.* ;

action code {:  private Lexique lexique = new Lexique() ;
                private Instruction inst ;
                private int bloc_courant = 0 ;
                private TDS tds = TDS.getInstance() ;

	    :} ;
   
/* Parser code to change the way the parser reports errors (include
   line and column number of the error). */
parser code {:

    /* Change the method report_error so it will display the line and column of where the error
       occurred in the input as well as the reason for the error which is passed into the method
       in the String 'message'. */

    public void report_error(String message , Object info) {
   
        /* Create a StringBuffer called 'm' with the string 'Error' in it. */
        StringBuffer m = new StringBuffer("");
   
        /* Check if the information passed to the method is the same type as the type 
           java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the information in the object 
               info that is being typecasted as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Check if the line number in the input is greater or equal to zero. */
            if (s.left >= 0) {                
                /* Add to the end of the StringBuffer error message the line number of the error 
                   in the input. */
                m.append(" a la ligne "+(s.left+1));   
                /* Check if the column number in the input is greater or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuffer error message the column number of the 
                       error in the input. */
                    m.append(" et colonne "+(s.right+1));
                    m.append(" avec le token:"+s.value) ;
            }
        }
   
        /* Add to the end of the StringBuffer error message created in this method the message that
           was passed into this method. */
        // m.append(message);
   
        /* Print the contents of the StringBuffer 'm' , which contains an error message , out on 
           a line. */
        System.err.println("ERREUR SYNTAXIQUE : "+m);
        System.exit(0);
    }
   
    /* Change the method report_fatal_error so when it reports a fatal error it will display the 
       line and column number of where the fatal error occurred in the input as well as the reason
       for the fatal error which is passed into the method in the object 'message' and then exit.*/
    public void report_fatal_error(String message , Object info) {
        report_error(message , info);
    }
:};
   
/* ------------Declaration of Terminals and Non Terminals Section----------- */
   
/* Terminals (tokens returned by the scanner).  
   Terminals that have no value are listed first and then terminals that do have a value , in this 
   case a String value , are listed on the next line down. */

terminal String PLUS, MOINS, MULT, DIV, MOD, GT, LT, DOUBLE_EQUAL, DIFF ;
terminal Symbol VIRGULE, PARENTH_OUVRANTE, PARENTH_FERMANTE, POINT_VIRGULE, EQUAL ;
terminal String CSTE_ENT, CSTE_CHAINE, IDF, S_FIN, S_CLASSE, S_LIRE, S_ECRIRE, STATUT, TYPE ;
   
/* Non terminals used in the grammar section.  
   Non terminals that have an object value are listed first and then non terminals that have an 
   integer value are listed.  An object value means that it can be any type , it isn't set to a 
   specific type.  So it could be an Integer or a String or whatever. */

non terminal Expression EXP ;
non terminal Lexique SYSTEME ;
non terminal ArrayList<String> L_IDF ;
non terminal String ACCES ;
non terminal ArrayList<Instruction> L_INSTRUCTION ;
non terminal Instruction INSTRUCTION, AFFECT, LIRE, ECRIRE ;
non terminal Symbol CLASSE, L_DECLARATION, DECLARATION, DECL_CHAMP, DECL_CONST ; 

/* truc bizare sur les prioritÃ©s */

precedence left MOINS,PLUS ;
precedence left MULT, DIV, MOD ;
precedence left GT, LT, DOUBLE_EQUAL, DIFF ;
precedence left S_LIRE, S_ECRIRE, IDF ;

/* ----------------------------Grammar Section-------------------- */
/* GRAMMAIRE DE L'ANALYSEUR SYNTAXIQUE

    PLIC 1
SYSTEME         ::= CLASSE
CLASSE          ::= S_CLASSE IDF L_DECLARATION S_FIN
L_DECLARATION   ::= DECLARATION L_DECLARATION | DECLARATION
DECLARATION     ::= DECL_CHAMP | DECL_CONST
DECL_CHAMP      ::= STATUT TYPE IDF L_IDF POINT_VIRGULE
DECL_CONST      ::= L_INSTRUCTION
L_INSTRUCTION   ::= INSTRUCTION L_INSTRUCTION | INSTRUCTION
INSTRUCTION     ::= AFFECT | LIRE | ECRIRE
AFFECT          ::= ACCES EQUAL EXP POINT_VIRGULE
ACCES           ::= IDF
LIRE            ::= S_LIRE IDF POINT_VIRGULE
ECRIRE          ::= S_ECRIRE EXP POINT_VIRGULE | S_ECRIRE CSTE_CHAINE POINT_VIRGULE

    PLIC 0
EXP ::= cste_ent | ( EXP ) | - EXP | EXP OPER EXP
OPER ::= + | - | * | > | < | == | != | / | %

*/

start with SYSTEME ;

SYSTEME         ::= CLASSE
                {: System.out.println("fin systeme") ; RESULT = lexique ; :}
                ;

CLASSE          ::= S_CLASSE IDF:i {: lexique.ajouterBloc(new Classe(i)) ; tds.entreeBloc() ; :} L_DECLARATION S_FIN
                    {: System.out.println("fin classe de nom "+i) ; :}
                ;

L_DECLARATION   ::= L_DECLARATION DECLARATION
                    {: System.out.println("fin l_decl -> l_decl decl") ; :}
                |
                    {: System.out.println("fin l_decl -> vide") ; :}
                ;

DECLARATION     ::= DECL_CHAMP
                    {: System.out.println("fin decl_champ") ; :}
                | DECL_CONST
                    {: System.out.println("fin decl_const") ; :}
                ;

DECL_CHAMP      ::= STATUT:s TYPE:t IDF:i L_IDF:l POINT_VIRGULE
                    {: System.out.println("fin decl_champ de premier nom "+i) ;
                       lexique.ajouterDecl(bloc_courant, new D_Champ(i,ileft+1,s,t)) ;
                       tds.ajouter(new Entree(t), i) ;
                       for(String idf : l) {
                        lexique.ajouterDecl(bloc_courant, new D_Champ(idf,ileft+1,s,t)) ;
                        tds.ajouter(new Entree(t), idf) ;
                       }:}
                ;

L_IDF           ::= VIRGULE IDF:i L_IDF:l
                    {: System.out.println("fin l_idf : "+i) ; l.add(i) ; RESULT = l ; :}
                |
                    {: System.out.println("fin l_idf vide") ; RESULT = new ArrayList<String>() ; :}
                ;

DECL_CONST      ::= L_INSTRUCTION:l
                    {: System.out.println("fin decl_const") ;
                       lexique.ajouterDecl(bloc_courant, new D_Const("idf", lleft+1, l)) ; :}
                ;

L_INSTRUCTION   ::= L_INSTRUCTION:l INSTRUCTION:i
                    {: System.out.println("fin l_inst -> l_inst inst") ; l.add(i) ; RESULT = l ; :}
                | INSTRUCTION:i
                    {: System.out.println("fin l_inst -> inst") ;
                       ArrayList<Instruction> l = new ArrayList<Instruction>() ;
                       l.add(i) ; RESULT = l ; :}
                ;

INSTRUCTION     ::= AFFECT:a
                    {: System.out.println("fin inst -> affect") ; RESULT = a ; :}
                | LIRE:l
                    {: System.out.println("fin inst -> lire") ; RESULT = l ; :}
                | ECRIRE:e
                    {: System.out.println("fin inst -> ecrire") ; RESULT = e ; :}
                ;

AFFECT          ::= ACCES:i EQUAL EXP:e POINT_VIRGULE
                    {: System.out.println("fin affect avec expression "+e) ;
                       RESULT = new Affectation(i, e, ileft+1) ; :}
                ;

ACCES           ::= IDF:i
                    {: System.out.println("fin acces idf "+i) ; RESULT = i ; :}
                ;

LIRE            ::= S_LIRE IDF:i POINT_VIRGULE
                    {: System.out.println("lire idf "+i) ; RESULT = new Lire(i, ileft+1) ; :}
                ;

ECRIRE          ::= S_ECRIRE EXP:e POINT_VIRGULE
                    {: System.out.println("fin ecrire exp "+e) ; RESULT = new Ecrire(e, eleft+1) ; :}
                | S_ECRIRE CSTE_CHAINE:c POINT_VIRGULE
                    {: System.out.println("fin ecrire chaine "+c.replaceAll("\\\\n","\n").replaceAll("\"\"", "\"")) ; RESULT = new Ecrire(c, cleft+1) ; :}
                ;

EXP	::= CSTE_ENT:i
	 {: RESULT = new Nombre(Integer.parseInt(i.trim())) ; :}

         |  IDF:i
	 {: System.out.println("fin exp idf "+i) ; RESULT = new Identificateur(i) ; :}

         |  PARENTH_OUVRANTE EXP:e PARENTH_FERMANTE
         {: RESULT = e ; :}

         |  MOINS:s EXP:e
         {: RESULT = new Soustraction(new Nombre(0), e, sleft+1, sright+1) ; :}

         |  EXP:g PLUS:s EXP:d
	 {: RESULT = new Somme(g, d, sleft+1, sright+1) ; :}

         |  EXP:g MOINS:s EXP:d
	 {: RESULT = new Soustraction(g, d, sleft+1, sright+1) ; :}

         |  EXP:g MULT:s EXP:d
	 {: RESULT = new Multiplication(g, d, sleft+1, sright+1) ; :}

         |  EXP:g DIV:s EXP:d
	 {: RESULT = new Division(g, d, sleft+1, sright+1) ; :}

         |  EXP:g GT:s EXP:d
	 {: RESULT = new GreaterThan(g, d, sleft+1, sright+1) ; :}

         |  EXP:g LT:s EXP:d
	 {: RESULT = new LowerThan(g, d, sleft+1, sright+1) ; :}

         |  EXP:g DOUBLE_EQUAL:s EXP:d
	 {: RESULT = new Equal(g, d, sleft+1, sright+1) ; :}

         |  EXP:g DIFF:s EXP:d
         {: RESULT = new NonEqual(g, d, sleft+1, sright+1) ; :}

         |  EXP:g MOD:s EXP:d
         {: RESULT = new Modulo(g, d, sleft+1, sright+1) ; :}
        ;

/*
         |  EXP:e1 OPER:op EXP:e2
         {: op.setGauche(e1) ;
            op.setDroite(e2) ;
            RESULT = op ; :}
	;
		
OPER    ::= PLUS:s
	 {: RESULT = new Somme(null, null, sleft+1, sright+1) ; :}
         | MOINS:s
	 {: RESULT = new Soustraction(null, null, sleft+1, sright+1) ; :}
         | MULT:s
	 {: RESULT = new Multiplication(null, null, sleft+1, sright+1) ; :}
         | GT:s
	 {: RESULT = new GreaterThan(null, null, sleft+1, sright+1) ; :}
         | LT:s
	 {: RESULT = new LowerThan(null, null, sleft+1, sright+1) ; :}
         | DOUBLE_EQUAL:s
	 {: RESULT = new Equal(null, null, sleft+1, sright+1) ; :}
         | DIFF:s
         {: RESULT = new NonEqual(null, null, sleft+1, sright+1) ; :}
        ;
*/
